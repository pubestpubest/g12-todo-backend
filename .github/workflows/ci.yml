name: CI Testing

on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".github/workflows/docker-push.yml"

env:
  GO_VERSION: "1.24.2"

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false  # We'll handle caching manually for better control
      
      # Step 3: Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-
          fail-on-cache-miss: false
      
      # Step 4: Download dependencies
      - name: Download dependencies
        run: go mod download
      
      # Step 5: Verify dependencies
      - name: Verify dependencies
        run: go mod verify
      
      # Step 6: Debug Go environment
      - name: Debug Go environment
        run: |
          echo "Go version: $(go version)"
          echo "GOPATH: $GOPATH"
          echo "GOROOT: $GOROOT"
          echo "Go env:"
          go env
          echo "Module info:"
          go list -m all
      
      # Step 7: Run linting (optional but recommended)
      - name: Run go vet
        run: go vet ./...
      
      # Step 8: Run unit tests
      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          go test -v -race ./feature/.../usecase

  # Placeholder for future integration tests
  integration-tests:
    name: Integration Tests (Placeholder)
    runs-on: ubuntu-latest
    needs: unit-tests
    if: false  # Disabled for now - will be enabled in the future
    
    services:
      # Database service for integration tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      # Step 3: Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      # Step 4: Download dependencies
      - name: Download dependencies
        run: go mod download
      
      # Step 5: Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      
      # Step 6: Set up test database
      - name: Set up test database
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          DB_NAME: testdb
        run: |
          echo "Setting up test database..."
          # Future: Run database migrations
          # go run main.go migrate
      
      # Step 7: Build application
      - name: Build application
        run: |
          echo "Building application..."
          go build -o app main.go
      
      # Step 8: Start backend service (placeholder)
      - name: Start backend service
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          DB_NAME: testdb
          PORT: 8080
        run: |
          echo "Starting backend service..."
          # Future: Start the application in background
          # ./app &
          # sleep 5
          # echo "Backend started on port 8080"
      
      # Step 9: Run integration tests (placeholder)
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Future: Run integration tests
          # go test -v -tags=integration ./tests/integration/...
      
      # Step 10: Cleanup
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up test environment..."
          # Future: Stop services, cleanup test data
          # pkill -f "./app" || true
